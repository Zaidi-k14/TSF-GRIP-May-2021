{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# **Author  : Syed Yousuf Zaidi**\n",
    "### **The Sparks Foundation GRIP Task 2**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Data Science & Business Analytics Intern May Batch 2021**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## *Task 2:-Prediction using Unsupervised Machine Learning*\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Objective : From the given ‘Iris’ dataset, Predict the optimum number of clusters and represent it visually ;"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Importing all the necessary libraries\n",
    "import pandas as pd\n",
    "import numpy as np  \n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn import datasets\n",
    "from sklearn.cluster import KMeans"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Loading the required dataset..."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Syed : Data loaded successfully\n"
     ]
    }
   ],
   "source": [
    "Data=\"Iris.csv\"\n",
    "Task_2=pd.read_csv(Data)\n",
    "print(\"Syed : Data loaded successfully\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Let's explore our Dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id</th>\n",
       "      <th>SepalLengthCm</th>\n",
       "      <th>SepalWidthCm</th>\n",
       "      <th>PetalLengthCm</th>\n",
       "      <th>PetalWidthCm</th>\n",
       "      <th>Species</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>5.1</td>\n",
       "      <td>3.5</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>Iris-setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>4.9</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>Iris-setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>4.7</td>\n",
       "      <td>3.2</td>\n",
       "      <td>1.3</td>\n",
       "      <td>0.2</td>\n",
       "      <td>Iris-setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>4.6</td>\n",
       "      <td>3.1</td>\n",
       "      <td>1.5</td>\n",
       "      <td>0.2</td>\n",
       "      <td>Iris-setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>5.0</td>\n",
       "      <td>3.6</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>Iris-setosa</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Id  SepalLengthCm  SepalWidthCm  PetalLengthCm  PetalWidthCm      Species\n",
       "0   1            5.1           3.5            1.4           0.2  Iris-setosa\n",
       "1   2            4.9           3.0            1.4           0.2  Iris-setosa\n",
       "2   3            4.7           3.2            1.3           0.2  Iris-setosa\n",
       "3   4            4.6           3.1            1.5           0.2  Iris-setosa\n",
       "4   5            5.0           3.6            1.4           0.2  Iris-setosa"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Task_2.head() #To get the first five no.of rows & columns present"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id</th>\n",
       "      <th>SepalLengthCm</th>\n",
       "      <th>SepalWidthCm</th>\n",
       "      <th>PetalLengthCm</th>\n",
       "      <th>PetalWidthCm</th>\n",
       "      <th>Species</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>145</th>\n",
       "      <td>146</td>\n",
       "      <td>6.7</td>\n",
       "      <td>3.0</td>\n",
       "      <td>5.2</td>\n",
       "      <td>2.3</td>\n",
       "      <td>Iris-virginica</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>146</th>\n",
       "      <td>147</td>\n",
       "      <td>6.3</td>\n",
       "      <td>2.5</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1.9</td>\n",
       "      <td>Iris-virginica</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>147</th>\n",
       "      <td>148</td>\n",
       "      <td>6.5</td>\n",
       "      <td>3.0</td>\n",
       "      <td>5.2</td>\n",
       "      <td>2.0</td>\n",
       "      <td>Iris-virginica</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>148</th>\n",
       "      <td>149</td>\n",
       "      <td>6.2</td>\n",
       "      <td>3.4</td>\n",
       "      <td>5.4</td>\n",
       "      <td>2.3</td>\n",
       "      <td>Iris-virginica</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>149</th>\n",
       "      <td>150</td>\n",
       "      <td>5.9</td>\n",
       "      <td>3.0</td>\n",
       "      <td>5.1</td>\n",
       "      <td>1.8</td>\n",
       "      <td>Iris-virginica</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      Id  SepalLengthCm  SepalWidthCm  PetalLengthCm  PetalWidthCm  \\\n",
       "145  146            6.7           3.0            5.2           2.3   \n",
       "146  147            6.3           2.5            5.0           1.9   \n",
       "147  148            6.5           3.0            5.2           2.0   \n",
       "148  149            6.2           3.4            5.4           2.3   \n",
       "149  150            5.9           3.0            5.1           1.8   \n",
       "\n",
       "            Species  \n",
       "145  Iris-virginica  \n",
       "146  Iris-virginica  \n",
       "147  Iris-virginica  \n",
       "148  Iris-virginica  \n",
       "149  Iris-virginica  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Task_2.tail() #To get the last five no.of rows & columns present"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 150 entries, 0 to 149\n",
      "Data columns (total 6 columns):\n",
      " #   Column         Non-Null Count  Dtype  \n",
      "---  ------         --------------  -----  \n",
      " 0   Id             150 non-null    int64  \n",
      " 1   SepalLengthCm  150 non-null    float64\n",
      " 2   SepalWidthCm   150 non-null    float64\n",
      " 3   PetalLengthCm  150 non-null    float64\n",
      " 4   PetalWidthCm   150 non-null    float64\n",
      " 5   Species        150 non-null    object \n",
      "dtypes: float64(4), int64(1), object(1)\n",
      "memory usage: 6.5+ KB\n"
     ]
    }
   ],
   "source": [
    "Task_2.info()  #To get the information about the various data-type"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id</th>\n",
       "      <th>SepalLengthCm</th>\n",
       "      <th>SepalWidthCm</th>\n",
       "      <th>PetalLengthCm</th>\n",
       "      <th>PetalWidthCm</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>150.000000</td>\n",
       "      <td>150.000000</td>\n",
       "      <td>150.000000</td>\n",
       "      <td>150.000000</td>\n",
       "      <td>150.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>75.500000</td>\n",
       "      <td>5.843333</td>\n",
       "      <td>3.054000</td>\n",
       "      <td>3.758667</td>\n",
       "      <td>1.198667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>43.445368</td>\n",
       "      <td>0.828066</td>\n",
       "      <td>0.433594</td>\n",
       "      <td>1.764420</td>\n",
       "      <td>0.763161</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>4.300000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.100000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>38.250000</td>\n",
       "      <td>5.100000</td>\n",
       "      <td>2.800000</td>\n",
       "      <td>1.600000</td>\n",
       "      <td>0.300000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>75.500000</td>\n",
       "      <td>5.800000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>4.350000</td>\n",
       "      <td>1.300000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>112.750000</td>\n",
       "      <td>6.400000</td>\n",
       "      <td>3.300000</td>\n",
       "      <td>5.100000</td>\n",
       "      <td>1.800000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>150.000000</td>\n",
       "      <td>7.900000</td>\n",
       "      <td>4.400000</td>\n",
       "      <td>6.900000</td>\n",
       "      <td>2.500000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               Id  SepalLengthCm  SepalWidthCm  PetalLengthCm  PetalWidthCm\n",
       "count  150.000000     150.000000    150.000000     150.000000    150.000000\n",
       "mean    75.500000       5.843333      3.054000       3.758667      1.198667\n",
       "std     43.445368       0.828066      0.433594       1.764420      0.763161\n",
       "min      1.000000       4.300000      2.000000       1.000000      0.100000\n",
       "25%     38.250000       5.100000      2.800000       1.600000      0.300000\n",
       "50%     75.500000       5.800000      3.000000       4.350000      1.300000\n",
       "75%    112.750000       6.400000      3.300000       5.100000      1.800000\n",
       "max    150.000000       7.900000      4.400000       6.900000      2.500000"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Task_2.describe()  #To get complete statistical knowledge about the dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "900"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Task_2.size   #To get total size of dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(150, 6)"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Task_2.shape  #To get total no.of rows & columns"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Check for the null value if present !!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Id               0\n",
       "SepalLengthCm    0\n",
       "SepalWidthCm     0\n",
       "PetalLengthCm    0\n",
       "PetalWidthCm     0\n",
       "Species          0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Task_2.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "Task_2.drop({\"Id\",\"Species\"},axis=1,inplace=True)  #To drop the column of Id & Species"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>SepalLengthCm</th>\n",
       "      <th>SepalWidthCm</th>\n",
       "      <th>PetalLengthCm</th>\n",
       "      <th>PetalWidthCm</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>5.1</td>\n",
       "      <td>3.5</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4.9</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>4.7</td>\n",
       "      <td>3.2</td>\n",
       "      <td>1.3</td>\n",
       "      <td>0.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4.6</td>\n",
       "      <td>3.1</td>\n",
       "      <td>1.5</td>\n",
       "      <td>0.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5.0</td>\n",
       "      <td>3.6</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>145</th>\n",
       "      <td>6.7</td>\n",
       "      <td>3.0</td>\n",
       "      <td>5.2</td>\n",
       "      <td>2.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>146</th>\n",
       "      <td>6.3</td>\n",
       "      <td>2.5</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>147</th>\n",
       "      <td>6.5</td>\n",
       "      <td>3.0</td>\n",
       "      <td>5.2</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>148</th>\n",
       "      <td>6.2</td>\n",
       "      <td>3.4</td>\n",
       "      <td>5.4</td>\n",
       "      <td>2.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>149</th>\n",
       "      <td>5.9</td>\n",
       "      <td>3.0</td>\n",
       "      <td>5.1</td>\n",
       "      <td>1.8</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>150 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     SepalLengthCm  SepalWidthCm  PetalLengthCm  PetalWidthCm\n",
       "0              5.1           3.5            1.4           0.2\n",
       "1              4.9           3.0            1.4           0.2\n",
       "2              4.7           3.2            1.3           0.2\n",
       "3              4.6           3.1            1.5           0.2\n",
       "4              5.0           3.6            1.4           0.2\n",
       "..             ...           ...            ...           ...\n",
       "145            6.7           3.0            5.2           2.3\n",
       "146            6.3           2.5            5.0           1.9\n",
       "147            6.5           3.0            5.2           2.0\n",
       "148            6.2           3.4            5.4           2.3\n",
       "149            5.9           3.0            5.1           1.8\n",
       "\n",
       "[150 rows x 4 columns]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Task_2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### To find the number of clusters for K-Means Classification, The value of K :"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "x = Task_2.iloc[:, [0, 1, 2, 3]].values    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.cluster import KMeans\n",
    "wcss = []\n",
    "\n",
    "for i in range(1, 11):\n",
    "    kmeans = KMeans(n_clusters = i, init = 'k-means++', \n",
    "                    max_iter = 300, n_init = 10, random_state = 0)\n",
    "    kmeans.fit(x)\n",
    "    wcss.append(kmeans.inertia_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[680.8243999999996,\n",
       " 152.36870647733915,\n",
       " 78.94084142614601,\n",
       " 57.34540931571815,\n",
       " 46.535582051282034,\n",
       " 38.93873974358975,\n",
       " 34.190687924796634,\n",
       " 29.90537429982511,\n",
       " 27.927882157034986,\n",
       " 25.955497086247092]"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "wcss"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plotting the results onto a line graph, \n",
    "# Observe 'The elbow'\n",
    "plt.plot(range(1, 11), wcss, color = 'purple',marker='p')\n",
    "plt.title('The Elbow method')\n",
    "plt.xlabel('Number of clusters')\n",
    "plt.ylabel('Sum of Squared Errors (SSE)') #Within cluster sum of squares\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### From the elbow method, we can see that the number of optimal clusters is 3.\n",
    "\n",
    "#### We can visualize the elbow as a bending line at k = 3"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# K-Means classifier :"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Creating the K-means classifier\n",
    "kmeans = KMeans(n_clusters = 3, init = 'k-means++',\n",
    "                max_iter = 300, n_init = 10, random_state = 0)\n",
    "y_kmeans = kmeans.fit_predict(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n",
       "       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n",
       "       1, 1, 1, 1, 1, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n",
       "       2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n",
       "       2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0,\n",
       "       0, 0, 0, 2, 2, 0, 0, 0, 0, 2, 0, 2, 0, 2, 0, 0, 2, 2, 0, 0, 0, 0,\n",
       "       0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 2])"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_kmeans"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Visualisation of Clusters :"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x102dd238>"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 648x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualising the clusters - On the first two columns\n",
    "plt.figure(figsize=(9,5))\n",
    "plt.scatter(x[y_kmeans == 0, 0], x[y_kmeans == 0, 1], \n",
    "            s = 100, c = 'purple', label = 'Iris-setosa')\n",
    "plt.scatter(x[y_kmeans == 1, 0], x[y_kmeans == 1, 1], \n",
    "            s = 100, c = 'red', label = 'Iris-versicolour')\n",
    "plt.scatter(x[y_kmeans == 2, 0], x[y_kmeans == 2, 1],\n",
    "            s = 100, c = 'green', label = 'Iris-virginica')\n",
    "\n",
    "plt.title('Clusters of Species')\n",
    "plt.xlabel('Features')\n",
    "plt.ylabel('Cluster')\n",
    "\n",
    "# Plotting the centroids of the clusters\n",
    "plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:,1], \n",
    "            s = 100, c = 'black', label = 'Centroids')\n",
    "\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Stay home, stay safe 😷 "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Thankyou 🙏"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
